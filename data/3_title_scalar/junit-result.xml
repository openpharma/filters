<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="test-assert" timestamp="2023-08-04T22:53:00Z" hostname="7d8447fcb9f5" tests="24" skipped="0" failures="0" errors="0" time="0.317">
    <testcase time="0.015" classname="test_assert" name="_assert_character_scalar_works"/>
    <testcase time="0.033" classname="test_assert" name="_assert_character_scalar_works"/>
    <testcase time="0.0259999999999999" classname="test_assert" name="_assert_character_scalar_works"/>
    <testcase time="0.022" classname="test_assert" name="_assert_character_scalar_works"/>
    <testcase time="0.01" classname="test_assert" name="_assert_character_scalar_works"/>
    <testcase time="0.01" classname="test_assert" name="_assert_character_scalar_works"/>
    <testcase time="0.00900000000000001" classname="test_assert" name="_assert_character_scalar_works"/>
    <testcase time="0.00800000000000001" classname="test_assert" name="_assert_character_scalar_works"/>
    <testcase time="0.018" classname="test_assert" name="_assert_character_scalar_works"/>
    <testcase time="0.069" classname="test_assert" name="_assert_logical_scalar_works"/>
    <testcase time="0.002" classname="test_assert" name="_assert_logical_scalar_works"/>
    <testcase time="0.00800000000000001" classname="test_assert" name="_assert_logical_scalar_works"/>
    <testcase time="0.00800000000000001" classname="test_assert" name="_assert_logical_scalar_works"/>
    <testcase time="0.00800000000000001" classname="test_assert" name="_assert_logical_scalar_works"/>
    <testcase time="0.0089999999999999" classname="test_assert" name="_assert_logical_scalar_works"/>
    <testcase time="0.00700000000000012" classname="test_assert" name="_assert_character_vector_works"/>
    <testcase time="0.002" classname="test_assert" name="_assert_character_vector_works"/>
    <testcase time="0.00099999999999989" classname="test_assert" name="_assert_character_vector_works"/>
    <testcase time="0.00800000000000001" classname="test_assert" name="_assert_character_vector_works"/>
    <testcase time="0.00800000000000001" classname="test_assert" name="_assert_character_vector_works"/>
    <testcase time="0.00800000000000001" classname="test_assert" name="_assert_character_vector_works"/>
    <testcase time="0.0130000000000001" classname="test_assert" name="_assert_character_vector_works"/>
    <testcase time="0.00800000000000001" classname="test_assert" name="_assert_character_vector_works"/>
    <testcase time="0.00700000000000012" classname="test_assert" name="_assert_character_vector_works"/>
  </testsuite>
  <testsuite name="test-filters" timestamp="2023-08-04T22:53:00Z" hostname="7d8447fcb9f5" tests="46" skipped="0" failures="0" errors="0" time="1.031">
    <testcase time="0.393" classname="test_filters" name="Filtering_works_as_expected"/>
    <testcase time="0.016" classname="test_filters" name="Filtering_works_as_expected"/>
    <testcase time="0.0509999999999999" classname="test_filters" name="Filtering_works_as_expected"/>
    <testcase time="0.0269999999999999" classname="test_filters" name="Filtering_works_as_expected"/>
    <testcase time="0.0250000000000001" classname="test_filters" name="Filtering_works_as_expected"/>
    <testcase time="0.0289999999999999" classname="test_filters" name="Filtering_works_as_expected"/>
    <testcase time="0.00700000000000012" classname="test_filters" name="Filtering_works_as_expected"/>
    <testcase time="0.018" classname="test_filters" name="Filtering_works_as_expected"/>
    <testcase time="0.0119999999999998" classname="test_filters" name="Filtering_works_as_expected"/>
    <testcase time="0.036" classname="test_filters" name="Using_filters_with_multiple_targets_affects_all_listed_datasets"/>
    <testcase time="0.018" classname="test_filters" name="Using_filters_with_multiple_targets_affects_all_listed_datasets"/>
    <testcase time="0.048" classname="test_filters" name="Using_filters_with_multiple_targets_affects_all_listed_datasets"/>
    <testcase time="0.018" classname="test_filters" name="Filtering_preserves_column_labels"/>
    <testcase time="0.0600000000000001" classname="test_filters" name="Filtering_preserves_column_labels"/>
    <testcase time="0.0069999999999999" classname="test_filters" name="Filter_IDs_are_attached_as_an_attribute"/>
    <testcase time="0.0110000000000001" classname="test_filters" name="Filter_IDs_are_attached_as_an_attribute"/>
    <testcase time="0.01" classname="test_filters" name="Filter_IDs_are_attached_as_an_attribute"/>
    <testcase time="0.002" classname="test_filters" name="Filter_IDs_are_attached_as_an_attribute"/>
    <testcase time="0.016" classname="test_filters" name="Filter_IDs_are_attached_as_an_attribute"/>
    <testcase time="0.002" classname="test_filters" name="Filter_IDs_are_attached_as_an_attribute"/>
    <testcase time="0.002" classname="test_filters" name="Filter_IDs_are_attached_as_an_attribute"/>
    <testcase time="0.002" classname="test_filters" name="Filter_IDs_are_attached_as_an_attribute"/>
    <testcase time="0.00800000000000001" classname="test_filters" name="Adding_new_filters_works"/>
    <testcase time="0.002" classname="test_filters" name="Adding_new_filters_works"/>
    <testcase time="0.0069999999999999" classname="test_filters" name="Adding_new_filters_with_multiple_targets_works"/>
    <testcase time="0.0189999999999999" classname="test_filters" name="Invalid_filter_IDs_throw_an_error"/>
    <testcase time="0.00800000000000001" classname="test_filters" name="Invalid_filter_IDs_throw_an_error"/>
    <testcase time="0.01" classname="test_filters" name="Invalid_filter_IDs_throw_an_error"/>
    <testcase time="0.00800000000000001" classname="test_filters" name="Invalid_filter_IDs_throw_an_error"/>
    <testcase time="0.00700000000000012" classname="test_filters" name="Invalid_filter_IDs_throw_an_error"/>
    <testcase time="0.00800000000000001" classname="test_filters" name="Invalid_filter_IDs_throw_an_error"/>
    <testcase time="0.0130000000000001" classname="test_filters" name="Overwriting_existing_filters_fails_when_overwrite_FALSE_"/>
    <testcase time="0.00800000000000001" classname="test_filters" name="Overwriting_existing_filters_fails_when_overwrite_FALSE_"/>
    <testcase time="0.00599999999999978" classname="test_filters" name="Overwriting_existing_filters_suceeds_when_overwrite_TRUE_"/>
    <testcase time="0.00200000000000022" classname="test_filters" name="Overwriting_existing_filters_suceeds_when_overwrite_TRUE_"/>
    <testcase time="0.0129999999999999" classname="test_filters" name="_get_filter_errors_when_ID_does_not_exist"/>
    <testcase time="0.00800000000000001" classname="test_filters" name="_get_filter_errors_when_ID_does_not_exist"/>
    <testcase time="0.00700000000000012" classname="test_filters" name="_get_filter_errors_when_ID_does_not_exist"/>
    <testcase time="0.0169999999999999" classname="test_filters" name="Filters_can_only_be_applied_to_data_frames_and_lists"/>
    <testcase time="0.00700000000000012" classname="test_filters" name="Filters_can_only_be_applied_to_data_frames_and_lists"/>
    <testcase time="0.0089999999999999" classname="test_filters" name="Filters_can_only_be_applied_to_data_frames_and_lists"/>
    <testcase time="0.00800000000000001" classname="test_filters" name="Filters_can_only_be_applied_to_data_frames_and_lists"/>
    <testcase time="0.0139999999999998" classname="test_filters" name="Only_named_lists_can_be_filtered"/>
    <testcase time="0.0140000000000002" classname="test_filters" name="A_missing_target_datasets_causes_an_error"/>
    <testcase time="0.00800000000000001" classname="test_filters" name="A_missing_target_datasets_causes_an_error"/>
    <testcase time="0.00999999999999979" classname="test_filters" name="All_filters_are_properly_listed"/>
  </testsuite>
  <testsuite name="test-load_filters" timestamp="2023-08-04T22:53:01Z" hostname="7d8447fcb9f5" tests="7" skipped="0" failures="0" errors="1" time="0.199">
    <testcase time="0.0370000000000004" classname="test_load_filters" name="_load_filters_errors_when_input_is_not_a_yaml_file"/>
    <testcase time="0.012" classname="test_load_filters" name="_load_filters_errors_when_input_is_not_a_yaml_file"/>
    <testcase time="0.00999999999999979" classname="test_load_filters" name="_load_filters_errors_when_input_is_not_a_yaml_file"/>
    <testcase time="0.00800000000000001" classname="test_load_filters" name="_load_filters_errors_when_input_is_not_a_yaml_file"/>
    <testcase time="0.028" classname="test_load_filters" name="_load_filters_adds_non_existing_filters">
      <error type="error" message="Error: Filter 'IT' already exists. Set `overwrite = TRUE` to force overwriting the existing filter definition. ('test-load_filters.R:13:3')">Error: Filter 'IT' already exists. Set `overwrite = TRUE` to force overwriting the existing filter definition.
Backtrace:
    ▆
 1. └─filters::load_filters(filters_file) at test-load_filters.R:13:2
 2.   └─base::Map(...)
 3.     └─base::mapply(FUN = f, ..., SIMPLIFY = FALSE)
 4.       └─filters (local) `&lt;fn&gt;`(dots[[1L]][[112L]], dots[[2L]][[112L]])
 5.         └─filters::add_filter(...)
 6.           └─filters:::assert_filter_exists(id)
 7.             └─filters:::abort(...)</error>
    </testcase>
    <testcase time="0.077" classname="test_load_filters" name="_load_filters_does_not_overwrite_existing_filters_by_default"/>
    <testcase time="0.0270000000000001" classname="test_load_filters" name="_load_filters_overwrites_existing_filters_when_overwrite_TRUE_"/>
  </testsuite>
  <testsuite name="test-utils" timestamp="2023-08-04T22:53:02Z" hostname="7d8447fcb9f5" tests="3" skipped="0" failures="0" errors="0" time="0.109">
    <testcase time="0.0289999999999999" classname="test_utils" name="_semi_join_keeps_only_records_in_x_that_have_matching_records_in_y_"/>
    <testcase time="0.0449999999999999" classname="test_utils" name="_semi_join_keeps_only_records_in_x_that_have_matching_records_in_y_"/>
    <testcase time="0.0350000000000001" classname="test_utils" name="_semi_join_preserves_column_labels"/>
  </testsuite>
</testsuites>
